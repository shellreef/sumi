\input texinfo
@settitle A Word About Strings   2003-08-02 JC
@setfilename strings.info              
@node Top, C strings, (dir), (dir)

@copying
This manual is for an explanation of C strings and it alternatives.

Copyright @copyright{} 2004 Dan Weber

Copyright @copyright{} 2003-2004 Jeff Connelly

@quotation
Permission is granted under the terms of the GNU GPL.
@end quotation
@end copying

@menu
* C strings::                   
@end menu


@node C strings,  , Top, Top
@chapter Strings
@section C strings

@menu
* Specifications::              
* Disadvantages::               
* Solutions::                   
@end menu

@node Specifications, Disadvantages, C strings, C strings
@subsection Specifications
In C, you have the char* data type, i.e., a pointer to a character. This is
often used for strings. A C string is a contigious sequence of characters,
terminated by a NUL character ('\0'). A char* variable points to the first
character in the string. String manipulations thus know the beginning of the
string, and can loop until a null character is encountered to find the end.

@node Disadvantages, Solutions, Specifications, C strings
@subsection Disadvantages
The disadvantage of this approach, even though it allows strings of nearly
unlimited size, is that nulls cannot exist within C strings. This is a serious
problem when dealing with binary data, especially executables, as with many
types of files, the null is often the most prevalent:

@example
$ perl -e'$/=\1; $freq[ord]++ while(<>); print join" ",@@freq' < /usr/X11R6/bin/Xfree86

@end example

As you can see, the \0 is by far the most common character, with 329,635 hits.

Null-terminated C strings are unacceptable in many situations.
@node Solutions,  , Disadvantages, C strings
@subsection Solutions
In ordinary C, arbitrary data can be passed around using a char* as well as
a length variable. These must be kept together when dealing with binary data,
which is not a lot of fun. Fortunately, C++ provides its own class for dealing
with strings that is superior to C's.

Its called "string", and you can get it by #include <string>. If your compiler
is compliant, it'll be in the std namespace, so you can refer to it with
std::string. (Actually, std::string isn't part of the STL; its part of some
ANSI standard). For the most part, this class works transparently, not requiring
any major changes or rethinking your application to use it.

However, string literals are still null-terminated. Even when immediately
casted to std::string:

@code{std::cout << std::string("a\0b") << std::endl;}

This will print "a". Very disappointing. But not all is lost. In fact, this
problem is easy to overcome: specify the length:

@code{std::cout << std::string("a\0b", 3) << std::endl;}
Now string will know where to stop reading, and will include your null!

std::string can be convenient for storing binary data, now. All you have to
remember is that when dealing with binary data, you must include the length.
Specifically, do not do this:

@example
char sz[3];
sz[0] = 'a';
sz[1] = '\0';   // assume this data came from somewhere
sz[2] = 'b';    // such as a file or whatever


std::string str;

str = "here's your data: ";
str += sz;

std::cout << str << std::endl;
@end example
This is wrong, and it will print "here's your data: a". The problem is
char[3] is being cast to string, and in doing so, string assumes the string is
null-terminated. Fix it like this:

str += std::string(sz, 3);

Now it works as expected.

Next, converting std::string's of binary data to char*s. This is easy:

const char* sz = str.data();
int len = str.length();

str.length() will work correctly with binary data because std::string doesn't
depend on the null. str.data() returns a const char* (so you can't change it)
pointer to the internal buffer. This is similar to str.c_str(), but c_str()
appends a null at the end. Make sure to use data() for arbitrary data.

MFC's CString has a similar constructor:
CString( LPCTSTR lpch, int nLength)

This is a minor point, but I'm writing it because I was personally bitten
a bug from mixing null-terminated strings and std::string's. Hope this helps.

@bye
