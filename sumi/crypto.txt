Adding Crypto to SUMI 20050717

Many different crypto libraries for Python:
 PyCrypto - the best, recommended by standard library documentation
 SSLCrypto - uses OpenSSL, but no AES, RNG is broken, huge bencoded output
 cryptkit.sf.net - slim, but from 2001, no bugfixes, no RSA
 ezPyCrypto - wrapper for PyCrypto
 yawPyCrypto - wrapper for PyCrypto
 pyOpenSSL - X509, PKCS7/12
 pow.sf.net - Python OpenSSL Wrapper, PEM, ASN.1 

Use public key cryptography (RSA) at first to exchange session keys & IV,
then use AES in CTR mode to encrypt packets.

- cleartext
+ RSA
= AES

 Client         Server
 <---s.public key------       advertised
 ----c.public key----->       may also request server public key, if don't have
 <+++sesskey+IV++++++++ RSA   may also include server public key, if requested
 ====sumi send========> AES
 <======auth pkt======= AES
 ====sumi auth========> AES
 <======data=========== AES
 <======data=========== AES
 <======data=========== AES
 <======data=========== AES
 =======ack===========> AES
 etc.

Session key and IV are sent by server, when receiving a public key from a 
client. This allows the client to send an AES'd sumi send. 

== below is old, superseded by above ==
Crypto in SUMI 20040218

* unDONE Pre-auth encryption, so covert (optional) + data chan can be encrypted. This
  way the IP can be encrypted, so IRC net doesn't need to encrypt and IRC
  admins can't track; only UDP spoofers can. (Also it will encrypt prefix, so
  the UDP stream cannot be associated with it easily.)
  pycrypto: http://www.amk.ca/python/code/crypto.html pycrypto.sf.net
   ezpycrypto, yawpycrypto.sf.net

* TODO Public key encryption.  RSA/DSA/El Gamal. GnuPG has minimium 768-bit
  keysize = 192 bytes, which isn't too bad.


pycrypto has: (/usr/ports/security/py-pycrypto)

    * Hash functions: MD2, MD4, MD5, SHA, HAVAL RIPEMD.
    * Block encryption algorithms: AES, ARC2, Blowfish, CAST, DES, Triple-DES, IDEA, RC5, Sapphire
    * Stream encryption algorithms: ARC4, simple XOR.
    * Public-key algorithms: RSA, DSA, ElGamal, qNEW.
m2crypto has these too (/usr/ports/security/py-m2crypto), and SSL

Any of the symmetric encryptions can be used. Identifiers for future:
 Hash:       md2 md4 md5 sha haval ripemd
 Symmetric:  aes arc2 bf cast des 3des idea rc5 sapphire arc4 xor otp
 Public-key: rsa dsa elg qnew
(Most of these are from PyCrypt, but not otp). TODO: switch from CryptKit to
PyCrypto.

When implemented, this should be done pre-auth (sumi sec <type> <key>). Could
be a problem to exchange large keys as required with public-key algorithms.
Might be able to send as multiple messages. (And ack's should be compressed.)

