#!/usr/bin/env python
# Created:20030402
# By Jeff Connelly

# SUMI server
# Communicates with client via IRC, sends data via UDP

import string
import threading
import irclib
from irclib import nm_to_n
import base64
import random
import socket
import struct
import sys
import operator
import os
import md5
import time

import libsumi

clients = { "authenticated": {} }
global_mss = 5000
SUMIHDRSZ = 6
IPHDRSZ = 20
UDPHDRSZ = 8
IP_TOTLEN_HOST_ORDER = 1    # 1 for FreeBSD, 0 for Linux
raw_socket = 0
irc_nick = "sumixyz"        # Your IRC nickname for serving
stealth_mode = 0            # 1 for no client error messages, 0 for

# https://sourceforge.net/tracker/?func=detail&atid=105470&aid=860134&group_id=5
470
# This is for Win32
if (not hasattr(socket, "IP_HDRINCL")):
    socket.IP_HDRINCL = 2

# set_src_allow("4.0.0.0/24") -> allow 4.0.0.0 - 4.255.255.255
def set_src_allow(allow_cidr):
    global SRC_IP_MASK, SRC_IP_ALLOW
    (allow, cidr) = allow_cidr.split("/")
    cidr = int(cidr)
    SRC_IP_MASK = (0xffffffffL >> (32 - cidr) << (32 - cidr))
    allow_list = map(int, allow.split("."))
    a = b = c = d = 0
    try:
        a = allow_list[0]
        b = allow_list[1]
        c = allow_list[2]
        d = allow_list[3]
    except IndexError:    # digits are allowed to be omitted
        pass
    (SRC_IP_ALLOW, ) = struct.unpack("L", struct.pack("BBBB", a, b, c, d))
    # For consistency. SRC_IP_ALLOW bits are only meaningful when the
    # corresponding bits are 1 in SRC_IP_MASK
    SRC_IP_ALLOW &= ~SRC_IP_MASK  
    print "Allowing: %s, mask=%.8x, allow=%.8x" % (allow_cidr, SRC_IP_MASK, SRC_IP_ALLOW)

def recvmsg(nick, msg):
    print "<%s>%s" % (nick, msg) 
    if (clients.has_key(nick) and clients[nick]["authenticated"] == 2):
        transfer_control(nick, msg)   # accept shorter protocol

    if (msg.find("sumi send ") == 0):
        print nick, "is sumi sending"
        if (clients.has_key(nick)):
            clients[nick].clear()
        msg = msg[len("sumi send "):]
        try: 
            #(file, offset, ip, port, mss, b64prefix, latency)=msg.split("\t") 
            args = libsumi.unpack_args(msg)
            file     = args["f"]
            offset   = args["o"]
            ip       = args["i"]
            port     = args["n"]
            mss      = args["m"]
            b64prefix= args["p"]
            latency  = args["l"]
        except ValueError:
             return sendmsg_error(nick, "not enough fields/missing fields")

        offset = int(offset)
        port = int(port)
        mss = int(mss)
        latency = int(latency)
        # Verify MSS. A packet is sent with size clients[nick]["mss"]
        # Limit minimum MSS to 256 (in reality, it has a minimum of ~548)
        # This is done to block an attack whereby the attacker chooses a MSS
        # very small MSS, so only the non-random data fits in the packet.
        # She then can hash our nick and verify it, without verifying the UDP
        # transmission. If we allow this to happen, then we may be sending UDP
        # packets to a host that didn't request them -- DoS attack. Stop that.
        # This check is also repeated in the second stage.
        #     256 MSS has to be small enough for anybody.
        if (mss < 256):
            return sendmsg_error(nick, "MSS too small")
        if (mss > global_mss):
            return sendmsg_error(nick, "MSS too large")
  
        # Prefix is base64-encoded for IRC transport
        # Note: There is no need to use Base85 - Base94 (RFC 1924) because
        # it can increase by a minimum of one byte. yEnc might work, but
        # its not worth it really. Base64 is perfect for encoding these 3 bytes
        prefix = base64.decodestring(b64prefix)

        # Prefix has to be 3 bytes, because if we allow larger, then clients
        # will choose larger prefixes filling up the auth packet with data
        # of their choice, circumventing the auth process
        if (len(prefix) != 3):   # b64-encoded:4 decoded:3
            return sendmsg_error(nick, "prefix length != 3, but %d" % (
                                       len(prefix)))

        # TODO: make sure the filename/pack number is valid, and we have it
        print "nick=%s, FILE=%s, OFFSET=%d, IP=%s:%d MSS=%d PREFIX=%s" % (
              nick, file, offset, ip, port, mss, b64prefix)

        # Build the authentication packet
        key = "%s\0\0\0" % prefix       # 3-byte prefix, 3-byte seqno 0
        if (len(key) != SUMIHDRSZ):
            return sendmsg_error(nick, "key + seqno != SUMIHDRSZ")

        # TODO: put information about the file here?
        # Payload is random data to fill MSS
        for i in range(mss - SUMIHDRSZ):
            key += struct.pack("B", random.randint(0, 255))
        if (len(key) != mss):
            # This is an internal error, and should never happen, but might
            return sendmsg_error(nick, "bad key generation: %d != %d" % (
                                       len(key), mss))
        clients[nick] = {}
        clients[nick]["file"] = file
        clients[nick]["offset"] = int(offset)
        clients[nick]["addr"] = (ip, port)
        clients[nick]["mss"] = int(mss)
        clients[nick]["prefix"] = prefix
        clients[nick]["latency"] = int(latency)
        clients[nick]["key"] = key       # Save so can hash when find out MSS
        clients[nick]["authenticated"] = 1   # first step complete

        # Send raw UDP from: ip:port, to: randip():0
        # This will trigger client to send sumi auth
        clients[nick]["asrc"] = randip()
        send_packet(clients[nick]["asrc"], (ip, port), key)
 
    elif (msg.find("sumi auth ") == 0):
        if (not clients.has_key(nick) or clients[nick]["authenticated"] != 1):
            return sendmsg_error(nick, "step 1 not complete")

        print "message: ", msg
        msg = msg[len("sumi auth "):]
        #(their_mss, asrc, hash) = msg.split("\t")
        args = libsumi.unpack_args(msg)
        print "args: ", args
        their_mss = args["m"]
        asrc      = args["s"]
        hash      = args["h"]
        their_mss = int(their_mss)
        print "Verifying MSS",nick,"...",
        if (clients[nick]["mss"] != their_mss):
            if (their_mss < 256):
                return sendmsg_error(nick, "MSS too small: %d" % their_mss)
            if (their_mss > clients[nick]["mss"]): 
                return sendmsg_error(nick, "MSS too high (%d>%d)!" % (their_mss, clients[nick]["mss"]))
            # Client might have received less than full packet; this says they
            # require a smaller packet size
            print "Downgrading MSS of %s: %d->%d" % (nick, clients[nick]["mss"], their_mss)
            clients[nick]["mss"] = their_mss
           
        print "Verifying spoofing capabilities..."
        if (clients[nick]["asrc"][0] != asrc):
            print "*** Warning: Possible spoof failure! We sent from %s,\n"\
                  "but client says we sent from %s. If this happens often,"\
                  "either its a problem with your ISP, or the work of\n"\
                  "mischevious clients. Dropping connection." % (clients[nick]["asrc"][0], asrc)
            #return sendmsg_error(nick, "srcip")
        
        print "Verifying authenticity of client..."
        # The hash has to be calculated AFTER the auth string is received so
        # we know how much of it to hash (number of bytes: the MSS)
        if (their_mss > len(clients[nick]["key"])):   # trying to overflow, eh..
            return sendmsg_error(nick, "claimed MSS > keylength!")

        # The client may have truncated the datagram to match their MSS
        context = md5.md5() 
        context.update(clients[nick]["key"][0:clients[nick]["mss"]])

        derived_hash = context.hexdigest()
        #derived_hash = base64.encodestring(context.digest()[:-1])
        if (derived_hash != hash):
            return sendmsg_error(nick, "hash")

        print nick,"is fully verified!"
        clients[nick]["authenticated"] = 2    # fully authenticated, let xfer

        sendmsg(nick, "sumi start ftempout\to0\tl16000")

def transfer_control(nick, msg):
    print "(authd)%s: %s" % (nick, msg)
    if (msg[0] == "k"):
        pass 
    elif (msg[0] == "n"):          # n<win>,<resend-1>,<resend-2> (neg acks)
        resends = msg[1:].split(",")
        resends.reverse()
        winsz = int(resends.pop())

        # Window size is # of packets to send without confirmation; lower it to
        # not include the number of packets needed to resent, if any. This
        # reduces the number of fresh packets sent to make room for the rexmits
        #winsz -= len(resends)
        # (actually client does this)

        blocksz = clients[nick]["mss"] - SUMIHDRSZ

        # If any resends, send first
        for resend in resends:
            try:
                resend = int(resend)
            except ValueError:
                print "Invalid packet number: %s" % resend;
                continue
            clients[nick]["fh"].seek(blocksz * (resend - 1))
            block = clients[nick]["fh"].read(blocksz)
            print "Resending %d" % (resend)
            datapkt(nick, block, resend)

        if (not clients[nick].has_key("seqno")):    # first pkt, set it up
            clients[nick]["seqno"] = 1 
            clients[nick]["fh"] = open("lptest", "rb")
            print "Starting transfer to %s..." % nick

        if (clients[nick]["seqno"] == None or clients[nick]["seqno"] == 0):
            print "Transfer to",nick,"complete."
            return

        # Reach in blocks of size mss-SUMIHDRSZ, winsz # of times
        for i in range(winsz):
            print "(i = %d/%d)" % (i, winsz)
            clients[nick]["fh"].seek(blocksz * (clients[nick]["seqno"] - 1))
            block = clients[nick]["fh"].read(blocksz)
            # Lose these packets so they will make us resend them
            if (random.randint(1, 100) != 100):
                datapkt(nick, block, clients[nick]["seqno"])
            # End of file if short block. Second case is redundant but will
            # occur if file size is an exact multiple of MSS
            if (len(block) < blocksz or len(block) == 0):
                clients[nick]["seqno"] = None   #  no more sending, but can resend
                break
            clients[nick]["seqno"] += 1

def datapkt(nick, block, seqno):
    if (clients[nick]["seqno"] > 16777216):   # 8-10GB is limit, depends on MSS
        sendmsg_error(nick, "file too large")
        clients[nick] = []

    pkt = clients[nick]["prefix"]        # 3-byte prefix
    pkt += struct.pack("!L", seqno)[1:]  # 3-byte seq no
    if (len(pkt) != SUMIHDRSZ):
        print "internal failure: header not expected size"
        sys.exit(3)
    pkt += block
    if (len(pkt) > clients[nick]["mss"]):
        print "fatal: trying to send packet >MSS"
        sys.exit(4)

    src = randip()
    send_packet(src, clients[nick]["addr"], pkt)
    print "DATA to %s(%s:%d)<-%s:%d, #%d len=%d (at=%d)" % (nick, clients[nick]["addr"][0], clients[nick]["addr"][1], src[0], src[1], seqno, len(block), clients[nick]["fh"].tell())
    nsleep(0.1)

import select
def nsleep(t):   # Until something better
    select.select([], [], [], 0.1)

# this function was also taken from comp.lang.python, some modifications
# subject: "ping multiple IPs with python", from Andrew McGregor
def fixULPChecksum(packet):
    # evil assumptions: no IP options, IPv4
    pseudopkt = ''.join([packet[:IPHDRSZ][-8:],
                         '\x00',
                         packet[:IPHDRSZ][-11],
                         struct.pack('!H', len(packet) - IPHDRSZ),
                         packet[IPHDRSZ:IPHDRSZ+16],
                         '\x00\x00',
                         packet[IPHDRSZ+18:]]
                        + [x for x in ['\x00'] if len(packet) & 1])
    csum = reduce(operator.add,
                  struct.unpack('!%dH' % (len(pseudopkt)>>1),
                         pseudopkt))
    csum = (csum>>16) + (csum&0xffff)
    csum += (csum>>16)
    csum = (csum&0xffff)^0xffff
    return ''.join([packet[:IPHDRSZ+16],
                    struct.pack('!H', csum),
                    packet[IPHDRSZ+18:]])

def send_packet(src, dst, payload):
    #print "Packet-> ",src,"->",dst," bytes:",len(payload)
    #send_packet_LIBNET(src, dst, payload)
    #send_packet_DEBUG(dst, payload)
    send_packet_SOCKET(src, dst, payload)

# Send non-spoofed packet. For debugging purposes ONLY.
# This uses the high(er)-level socket routines; its useful because you
# don't need to run as root when testing it.
def send_packet_DEBUG(dst, payload):
    print "ns",
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(dst)
    s.send(payload)
    s.close()

# Send packet using libnet
# This is broken and sometimes produces non-receivable packets...hmm?
def send_packet_LIBNET(src, dst, payload):
    ifc = libnet.interface()
    ifc.open_raw(libnet.IPPROTO_UDP)
    pkt = libnet.packet()  # py-libnet no payload??
    pkt.payload = payload
    # XXX: py-libnet has a bug somewhere where the UDP ports are treated as
    # signed, and higher ports will raise an exception.
    pkt.build_udp(src[1], dst[1])
    pkt.build_ip(len(pkt),0,1,0,255,libnet.IPPROTO_UDP,libnet.name_resolve(src[0],0),libnet.name_resolve(dst[0],0))
    #+len(payload) sends the payload twice?? But without it, incorrect cksum
    pkt.do_checksum(libnet.IPPROTO_UDP, libnet.UDP_H + len(payload))
    pkt.do_checksum(libnet.IPPROTO_IP, libnet.IP_H + libnet.UDP_H + len(payload))
    ifc.write(pkt)

# Setup the raw socket. Only one raw socket is needed to send any number
# of packets, so it can be created at startup and root can be dropped; 
# alternatively, a setuid program can set envar RAWSOCKFD and pass it here.
def setup_raw(argv):
    global raw_socket
    if (os.environ.has_key("RAWSOCKFD")):
        raw_socket = socket.fromfd(int(os.environ["RAWSOCKFD"]), socket.AF_INET, socket.IPPROTO_UDP)
    else:    # have to be root, create socket
        if (dir(os).__contains__("geteuid")):
            print "EUID=", os.geteuid(), "UID=", os.getuid()
        try:
            raw_socket = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_UDP)
        except socket.error, e:
            print "Raw socket error:", e[1]
            if (e[0] == 1):
                if (os.getuid() != 0):
                    print "Tip: run as root, not",os.getuid()
                else:
                    print "Running as root, but error...?"
                os.system("sudo python %s" % argv[0])
                sys.exit(1)
        # Drop privs-this needs to be worked on
        if (dir(os).__contains__("setuid")):
            os.setuid(os.getuid()) 
            print "Running with uid: ", os.getuid()

# Send a UDP packet from src to dst
# (This uses the standard socket() functions, but doesn't work on my FreeBSD)
# It might work on your system but I use send_packet_LIBNET instead
def send_packet_SOCKET(src, dst, payload):
    global raw_socket

    # Bind raw socket to interface
    raw_socket.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)
    #raw_socket.bind( ("fxp0", socket.IPPROTO_UDP) );
    raw_socket.bind( ("", socket.IPPROTO_UDP) )
    #raw_socket.bind( ("127.0.0.1", 12345) )
    # Build IP header
    totlen = IPHDRSZ + UDPHDRSZ + len(payload)
    # XXX: Major source of confusion. The IP length field has to be in
    # host byte order for FreeBSD, network byte order for Linux.
    if (IP_TOTLEN_HOST_ORDER):
        totlen = socket.ntohs(totlen)
    
    packet = struct.pack("!BBHHHBBHLL",
        0x40 | IPHDRSZ >> 2,                   # version+IHL little endian
        #payload = ((IPHDRSZ >> 2) << 4) | 4,  # big endian
        0,                                     # DSCP/TOS
        totlen,                                # total length
        0,                                     # IP ID (let kernel)
        0,                                     # Frag offset & flags=none
        128,                                   # Time to live
        17,                                  # UDP=User datagram protocol
        0,                                     # Checksum (let kernel)
        struct.unpack("!L", socket.inet_aton(src[0]))[0], # Source address
        struct.unpack("!L", socket.inet_aton(dst[0]))[0], # Destination address
       ); 

    # Pseudoheader for checksum
    pseudo = struct.pack("!LLBBH", 
        struct.unpack("!L", socket.inet_aton(src[0]))[0],
        struct.unpack("!L", socket.inet_aton(dst[0]))[0],
        0, 17, UDPHDRSZ)

    # Build UDP header
    packet += struct.pack("!HHHH",
        src[1],                              # Source port
        dst[1],                              # Destination port
        UDPHDRSZ + len(payload),
        0,     # Checksum - filled in by fixULPChecksum
       );
    packet += payload
    fixULPChecksum(packet)

    #raw_socket.connect(dst)
    #raw_socket.send(packet)
    #print packet
    raw_socket.sendto(packet, dst)

# Random IP for spoofing
def randip():
    # TODO: CIDR notation; 4/24 = 4.0.0.0 - 4.255.255.255, masks, and excludes
    raw_ip = random.randint(0, 2 ** 32)
    raw_ip &= SRC_IP_MASK
    raw_ip |= SRC_IP_ALLOW
    str_ip = ".".join(map(str, struct.unpack("BBBB", struct.pack("L", raw_ip))))
    return (str_ip, random.randint(0, 65535))
 
def on_msg(c, e):
    try:
        recvmsg(nm_to_n(e.source()), e.arguments()[0])
    except None:   # remove None in production use to not crash on exceptions
        print "Unhandled exception caused by %s: " % nm_to_n(e.source()), sys.exc_info()

def on_nickinuse(c, e):
    old_nick = e.arguments()[0]
    new_nick = old_nick + "_"
    print "%s nick in use, using %s" % (old_nick, new_nick)
    c.nick(new_nick)

def on_notregistered(c, e):
    print "We have not registered."

def on_welcome(c, e):
    global irc_nick, irc_chan, irc_chankey
    print "We're logged in"
    c.mode(irc_nick, "+ix")

    print "Joining channel %s" % irc_chan
    c.join(irc_chan, irc_chankey)
def on_umodeis(c, e):
    modes = e.arguments()
    print "User modes: ", modes
 
def on_cantjoin(c, e):
    (chan, errmsg) = e.arguments()
    print "Can't join %s: %s" % (chan, errmsg)

def sendmsg_error(nick, msg):
    if (not stealth_mode):
        sendmsg(nick, "error: %s" % msg)
    print "%s -> error: %s" % (nick, msg)

def sendmsg(nick, msg):
    global server
    print nick,"->",msg
    #server.notice(nick, msg) 
    server.privmsg(nick, msg)

def main(argv):
    global server

    setup_raw(argv)

    irc = irclib.IRC()
    irc.add_global_handler("privmsg", on_msg)
    irc.add_global_handler("nicknameinuse", on_nickinuse)
    irc.add_global_handler("notregistered", on_notregistered)
    irc.add_global_handler("welcome", on_welcome)
    irc.add_global_handler("umodeis", on_umodeis)
    irc.add_global_handler("umode", on_umodeis)
    irc.add_global_handler("channelisfull", on_cantjoin)
    irc.add_global_handler("inviteonlychan", on_cantjoin)
    irc.add_global_handler("badchannelkey", on_cantjoin)
    server = irc.server()
    print "Connecting to IRC server...",
    server.connect(irc_server, irc_port, irc_nick)
    print "OK."
    irc.process_forever()
    #while(1):
    #    irc.process_once()

set_src_allow("4/24")

if __name__ == "__main__":
    main(sys.argv)


