#!/usr/bin/env python
# Created:20040201
# By Jeff Connelly

# $Id$

# SUMI configuration file, default version
# Copy this to config.py if you wish to restore defaults
# Comments here are okay because, unlike config.py, its never overwritten


# NOTE: Config files are subject to breakage between versions.

{
# Where to save downloaded files - must end in a / (or \ for win32)
# If empty, uses base_path + 'incoming'.
"dl_dir": "",
"save_interval": 1,#s   # Save resuming file every X seconds
        # Your IP and your port - these must be INTERNET ACCESSIBLE! That means
        # use your public IP, and forward a UDP port on your router  

# Note that SUMI downloaders are not anonymous, only uploaders. Uploading is
# usually the dodgey activity. Canada has ruled downloading legal:
#  http://news.zdnet.co.uk/business/legal/0,39020651,39118537,00.htm
        # TODO: Attempt to read myip from the  
        #  network interfaces. Local IPs are bad, as they indicate they will  
        #  be translated by a NAT most likely, so warn and offer to use real IP
        #  but with EXTREME CAUTION.  
        # TODO: While we're at it, also get netmask and offer to use it  
        # http://tgolden.sc.sabren.com/python/wmi_cookbook.html#ip_addresses  
        #  has WMI to get IP and MACs of IP-enabled network devices, can  
        #  use ioctl for BSD  
        # get_network_interfaces()  
#"myip": "4.34.151.113", 
#"myip": "10.0.0.7",
"myip": "",     # = get default IP

# Allow local IP addresses? ONLY ENABLE IF USING SUMI WITHIN A LAN!
"allow_local": False,

# Allow SUMI to run without any arguments? May be confusing to new users.
"allow_no_req": False,

# Port to listen on for receiving data. 53 might work well behind a firewall.
"myport": 3490,

# Your network medium's Maximum Tranmission Unit. Set this as high as you can
# without fragmentation. Too low=inefficient due to network overhead, and
# too high=inefficient to due fragmentation, making the data more fragile.

#"mtu": 552,       # Minimum
#"mtu": 1478,      # Ethernet w/ VLAN/tunnel headers (or lower)
#"mtu": 1492,      # Ethernet w/ PPPoE
"mtu": 1500,       # Ethernet
#"mtu": 4352,      # FDDI
#"mtu": 9244,      # Loopback on many OS's (FreeBSD, OSF/1)
#"mtu": 65535,     # Maximum (without jumbo payload option)

        # RWINSZ - Receive window size. This is the number of SECONDS   
        # before acking  
"rwinsz": 3,#seconds

        # Our DL bandwidth in bps. From this value, the sender will calculate  
        # the packet send delay as to not overwhelm our bandwidth. If this  
        # is set to higher than your real bandwidth, packets may be lost and  
        # it will be slower. Note that sender may have less bandwidth.  
#"bandwidth":   500000,
"bandwidth": 1500000,#bits/sec     # 1.5Mbps

"maxwait": 5,#seconds      # Maximum time to wait before timing out handshake


# The data channel is specified by the type (what kind of packets are sent)
# and the mode (how the packets are sent).

"data_chan_type": "u",     # Data channel type, u is UDP
#"data_chan_type": "i",     # Arbitrary ICMP packets, set port to type,code
#"data_chan_type": "e",     # ICMP echo mode, bounce off a gateway

"dchanmode": "socket",     # Data channel mode, use regular sockets
#"dchanmode": "pcap",      # Use pcap

"irc_nick": "sumiget", # This should be redelegated in transport-specific opt

# Column widths for sumigetw
'colwidths': [160, 107, 56, 55, 115, 69, 76, 99, 71, 49, 75, 39],

# Window size for sumigetw
"winsize": (858, 220),

# If True, sumigetw will load and run sumiserv to enable sharing. 
# Otherwise, sumigetw will only run sumiget. (Does not affect standalone
# sumiget or sumiserv.)
"share": True,

# Encrypt? If enabled:
#  If transport is insecure, will encrypt requests (interlock, etc.)
#  Encrypt the data stream
"crypt": True,
}
